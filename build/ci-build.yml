name: $(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/*
    
pr:
  paths:
    include:
    - src/*
    - build/ci-build.yml

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

variables:
  - group: 'Arcus Event Grid - Integration Testing'
  - group: 'Arcus - GitHub Package Registry'
  - group: 'Build Configuration'
  - template: ./variables/build.yml
  - name: 'Arcus_Api_BaseUrl'
    value: 'http://localhost:888/api/v1'

stages:
  - stage: Build
    jobs:
      - job: Compile
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DotNetCoreInstaller@0
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.Version))'
            inputs:
              version: '$(DotNet.Sdk.Version)'
          - task: DotNetCoreCLI@2
            displayName: 'Compile'
            inputs:
              projects: 'src/*.sln'
              arguments: '--configuration $(Build.Configuration)'
          - task: CopyFiles@2
            displayName: 'Copy build artifacts'
            inputs:
              contents: '**/?(bin|obj)/**'
              targetFolder: '$(Pipeline.Workspace)/build'
          - task: PublishPipelineArtifact@0
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/build'
              artifactName: Build

  - stage: UnitTests
    displayName: Unit Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: UnitTests
        displayName: 'Run unit tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - task: DotNetCoreInstaller@0
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.Version))'
            inputs:
              version: '$(DotNet.Sdk.Version)'
          - template: test/run-unit-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Unit'

  - stage: IntegrationTests
    displayName: Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: RunIntegrationTests
        displayName: 'Run integration tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - task: DotNetCoreInstaller@0
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.Version))'
            inputs:
              version: '$(DotNet.Sdk.Version)'
          - task: Docker@1
            displayName: 'Build Docker image'
            inputs:
              dockerFile: src/Arcus.EventGrid.Proxy.Api/Dockerfile
              imageName: 'azure-event-grid-proxy:$(Build.BuildId)'
              useDefaultContext: false
              buildContext: src
          - task: Docker@1
            displayName: 'Run Docker image'
            inputs:
              command: 'Run an image'
              imageName: 'azure-event-grid-proxy:$(Build.BuildId)'
              containerName: 'azure-event-grid-proxy'
              ports: '888:888'
              envVars: |
                ARCUS_HTTP_PORT=888
                ARCUS_EVENTGRID_TOPICENDPOINT=$(Arcus_EventGrid_TopicEndpoint)
                ARCUS_EVENTGRID_AUTHKEY=$(Arcus_EventGrid_EndpointKey)
          - template: test/run-integration-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Integration'
              category: 'Docker'
          - task: PowerShell@2
            displayName: 'Get Docker container logs'
            inputs:
              targetType: 'inline'
              script: 'docker logs azure-event-grid-proxy'
            condition: failed()
